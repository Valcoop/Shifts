type Query {
  slots(input: SlotsInput): [Slot!]!
}

input SlotsInput {
  startDate: Date!
  endDate: Date!
  active: Boolean
  isFull: Boolean
}

type Mutation {
  bookSlot(input: BookSlotInput!): BookSlotPayload!
  cancelBookedSlot(input: CancelBookedSlotInput!): CancelBookedSlotPayload!
  addSlot(input: AddSlotInput!): AddSlotPayload!
  removeSlot(input: RemoveSlotInput!): RemoveSlotPayload!
  updateSlot(input: UpdateSlotInput!): UpdateSlotPayload!
  updateUserSlot(input: UpdateUserSlotInput!): UpdateUserSlotPayload!
}

input BookSlotInput {
  userID: String!
  slotID: ID!
  fullName: String!
  phoneNumber: String!
}

type BookSlotPayload {
  slot: Slot!
}

input CancelBookedSlotInput {
  userSlotID: ID!
  absenceTypeID: String!
  description: String
}

type CancelBookedSlotPayload {
  slot: Slot!
}

input AddSlotInput {
  startDate: Date!
  duration: Int!
  jobID: String!
  totalPlace: Int!
  active: Boolean!
}

type AddSlotPayload {
  slot: Slot!
}

input RemoveSlotInput {
  slotID: ID!
}

type RemoveSlotPayload {
  slot: Slot!
}

input UpdateSlotInput {
  slotID: ID!
  startDate: Date
  duration: Int
  jobID: String
  totalPlace: Int
  active: Boolean
}

type UpdateSlotPayload {
  slot: Slot!
}

input UpdateUserSlotInput {
  userSlotID: ID!
  fullname: String
  phoneNumber: String
}

type UpdateUserSlotPayload {
  attendee: Attendee!
}

type SlotConnection {
  edges: [SlotEdge!]
  pageInfo: PageInfo
  totalCount: Int!
}

type SlotEdge {
  cursor: ID!
  node: Slot!
}

type Slot {
  id: ID!
  startDate: Date!
  duration: Int!
  job: Job!
  attendees(input: SlotAttendeesInput!): AttendeeConnection!
  totalPlace: Int!
  active: Boolean!
}

type AttendeeConnection {
  edges: [AttendeeEdge!]
  pageInfo: PageInfo
  totalCount: Int!
}

type AttendeeEdge {
  cursor: ID!
  node: Attendee!
}

type Attendee {
  userSlotID: ID!
  userID: String!
  fullName: String!
  phoneNumber: String!
}

input SlotAttendeesInput {
  first: Int
  after: ID
}
